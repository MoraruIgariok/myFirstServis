// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFirstShop.DataBase;

#nullable disable

namespace MyFirstShop.Migrations
{
    [DbContext(typeof(MyFirstShopContext))]
    [Migration("20230104214607_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyFirstShop.Table.Basket", b =>
                {
                    b.Property<Guid>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodNameBaket")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreateBk")
                        .HasColumnType("datetime2");

                    b.HasKey("BasketId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("MyFirstShop.Table.BasketProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Count")
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketProducts");
                });

            modelBuilder.Entity("MyFirstShop.Table.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MyFirstShop.Table.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Categori")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("CoutProduct")
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)");

                    b.Property<DateTime>("DateImport")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Deposites");
                });

            modelBuilder.Entity("MyFirstShop.Table.DepositShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepositId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepositId");

                    b.HasIndex("ShopId");

                    b.ToTable("DepositShops");
                });

            modelBuilder.Entity("MyFirstShop.Table.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(13, 3)
                        .HasColumnType("decimal(13,3)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyFirstShop.Table.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdressShop")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumberShop")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("MyFirstShop.Table.Basket", b =>
                {
                    b.HasOne("MyFirstShop.Table.Client", "CurrentClient")
                        .WithOne("CurrentBasket")
                        .HasForeignKey("MyFirstShop.Table.Basket", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentClient");
                });

            modelBuilder.Entity("MyFirstShop.Table.BasketProduct", b =>
                {
                    b.HasOne("MyFirstShop.Table.Basket", "baskets")
                        .WithMany("CurrentBasketProduct")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFirstShop.Table.Product", "products")
                        .WithMany("CurrentBasketProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("baskets");

                    b.Navigation("products");
                });

            modelBuilder.Entity("MyFirstShop.Table.DepositShop", b =>
                {
                    b.HasOne("MyFirstShop.Table.Deposit", "deposit")
                        .WithMany("depositShopList")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFirstShop.Table.Shop", "shop")
                        .WithMany("depositShopList")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("deposit");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("MyFirstShop.Table.Basket", b =>
                {
                    b.Navigation("CurrentBasketProduct");
                });

            modelBuilder.Entity("MyFirstShop.Table.Client", b =>
                {
                    b.Navigation("CurrentBasket")
                        .IsRequired();
                });

            modelBuilder.Entity("MyFirstShop.Table.Deposit", b =>
                {
                    b.Navigation("depositShopList");
                });

            modelBuilder.Entity("MyFirstShop.Table.Product", b =>
                {
                    b.Navigation("CurrentBasketProduct");
                });

            modelBuilder.Entity("MyFirstShop.Table.Shop", b =>
                {
                    b.Navigation("depositShopList");
                });
#pragma warning restore 612, 618
        }
    }
}
